# Summary:
# This workflow is named "Java CI Building with Maven" and is responsible for building a Java application using Maven.
#
# Trigger Events:
# - It is triggered on pull requests to the 'main' branch.
#
# Jobs:
# - The job "Build Java Application" runs on an Ubuntu machine and performs the following steps:
#   1. Checkout code: Pulls the latest code from the repository.
#   2. Setup Oracle JDK: Installs Oracle JDK 21.0.1.
#   3. Set Application Properties: Configures environment variables from secret properties for the Spring Boot application.
#   4. Build Spring Boot Application: Builds the Spring Boot application using Maven.

name: Java CI Building with Maven

on:
  pull_request:
    branches: [ main ] # Trigger workflow on pull request to main branch
  # workflow_dispatch:

jobs:
  build:
    name: Building Java Application with MySQL
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: CloudAppDB
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_USER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Check out the repository code

      - name: Wait for MySQL to start
        run: |
          until mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done
        shell: bash

      - name: Test MySQL Connectivity
        run: |
          mysql -h "127.0.0.1" -u "${{ secrets.DB_USERNAME }}" -p"${{ secrets.DB_USER_PASSWORD }}" -e "SHOW DATABASES;"

      - name: Set up Oracle JDK 21.0.1
        uses: oracle-actions/setup-java@v1 # Set up Oracle JDK 21.0.1
        with:
          website: oracle.com
          release: 21
          version: 21.0.1

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Application Properties for Tests
        run: |
          run: |
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.DB_USER_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=${{ vars.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ vars.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=${{ vars.SPRING_JPA_SHOW_SQL }}" >> src/main/resources/application.properties
          echo "cloud.aws.region.static=${{ vars.AWS_DEFAULT_REGION }}" >> src/main/resources/application.properties
          echo "cloud.aws.s3.bucket-name=${{ secrets.CLOUD_AWS_S3_BUCKET_NAME }}" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}" >> src/main/resources/application.properties
          echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.enabled=${{ vars.SPRING_SERVLET_MULTIPART_ENABLED }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-file-size=${{ vars.SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE }}" >> src/main/resources/application.properties
          echo "spring.servlet.multipart.max-request-size=${{ vars.SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE }}" >> src/main/resources/application.properties
          echo "logging.file.path=${{ vars.LOGGING_FILE_PATH }}" >> src/main/resources/application.properties
          echo "logging.file.name=${{ vars.LOGGING_FILE_NAME }}" >> src/main/resources/application.properties
          echo "logging.level.com.cloudcomputing.movieRetrievalWebApp.package=${{ vars.LOGGING_LEVEL_COM_CLOUDCOMPUTING_MOVIERETRIEVALWEBAPP_PACKAGE }}" >> src/main/resources/application.properties
          echo "logging.level.org.springframework=${{ vars.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK }}" >> src/main/resources/application.properties
          echo "logging.level.org.hibernate=${{ vars.LOGGING_LEVEL_ORG_HIBERNATE }}" >> src/main/resources/application.properties
          echo "logging.level.com.zaxxer.hikari=${{ vars.LOGGING_LEVEL_COM_ZAXXER_HIKARI }}" >> src/main/resources/application.properties
          echo "logging.level.root=${{ vars.LOGGING_LEVEL_ROOT }}" >> src/main/resources/application.properties
          echo "logging.level.org.springframework.boot.devtools=${{ vars.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT_DEVTOOLS }}" >> src/main/resources/application.properties

      - name: Run Build Application
        run: mvn clean install --file pom.xml
