# Summary:
# This workflow is named "Java CI Building with Maven" and is responsible for building a Java application using Maven.
#
# Trigger Events:
# - It is triggered on pull requests to the 'main' branch.
#
# Jobs:
# - The job "Build Java Application" runs on an Ubuntu machine and performs the following steps:
#   1. Checkout code: Pulls the latest code from the repository.
#   2. Setup Oracle JDK: Installs Oracle JDK 21.0.1.
#   3. Set Application Properties: Configures environment variables from secret properties for the Spring Boot application.
#   4. Build Spring Boot Application: Builds the Spring Boot application using Maven.

name: Java CI Building with Maven

on:
  pull_request:
    branches: [main] # Trigger workflow on pull request to main branch
  workflow_dispatch:

jobs:
  build:
    name: Build Java Application
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Check out the repository code

      - name: Set up Oracle JDK 21.0.1
        uses: oracle-actions/setup-java@v1 # Set up Oracle JDK 21.0.1
        with:
          website: oracle.com
          release: 21
          version: 21.0.1
          
      - name: Ensure resources directory exists
        run: mkdir -p src/main/resources

      - name: Create application.properties file
        run: |
          echo "spring.application.name=${{ secrets.SPRING_APPLICATION_NAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> src/main/resources/application.properties
          echo "spring.datasource.driver-class-name=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> src/main/resources/application.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> src/main/resources/application.properties
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> src/main/resources/application.properties
          echo "spring.jpa.show-sql=${{ secrets.SPRING_JPA_SHOW_SQL }}" >> src/main/resources/application.properties
          echo "logging.level.com.cloudcomputing.movieRetrievalWebApp.package=${{ secrets.LOGGING_LEVEL_COM_CLOUDCOMPUTING_MOVIERETRIEVALWEBAPP_PACKAGE }}" >> src/main/resources/application.properties
          echo "logging.level.org.springframework=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK }}" >> src/main/resources/application.properties
          echo "logging.level.org.springframework.boot.devtools=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT_DEVTOOLS }}" >> src/main/resources/application.properties
          echo "logging.level.org.hibernate=${{ secrets.LOGGING_LEVEL_ORG_HIBERNATE }}" >> src/main/resources/application.properties
          echo "logging.level.com.zaxxer.hikari=${{ secrets.LOGGING_LEVEL_COM_ZAXXER_HIKARI }}" >> src/main/resources/application.properties
          echo "logging.level.root=${{ secrets.LOGGING_LEVEL_ROOT }}" >> src/main/resources/application.properties

      - name: Verify application.properties file location
        run: |
          if [ -f src/main/resources/application.properties ]; then
            echo "application.properties file created successfully."
          else
            echo "application.properties file not found!"
            exit 1 # Fail the build if the file is not found
          fi

      - name: Building Spring Boot Application
        run: mvn clean install --file pom.xml
