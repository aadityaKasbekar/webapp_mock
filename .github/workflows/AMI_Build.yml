# Summary:
# This workflow is named "Building AMI" and is responsible for building an Amazon Machine Image (AMI) after a pull request is merged.
#
# Trigger Events:
# - It is triggered when a pull request to the 'main' branch is merged.
#
# Jobs:
# - The job "Building AMI" runs on an Ubuntu machine and performs the following steps:
#   1. Checkout code: Pulls the latest code from the repository.
#   2. Setup Oracle JDK: Installs Oracle JDK 21.0.1.
#   3. Set Application Properties: Configures environment variables from secret properties for the Spring Boot application.
#   4. Build Spring Boot Application: Builds the Spring Boot application using Maven.
#   5. Setup Packer: Installs the specified version of Packer (1.11.2).
#   6. Run `packer init`: Initializes the Packer environment with the specified template.
#   7. Run `packer fmt`: Formats the Packer template for consistency.
#   8. Run `packer validate`: Validates the Packer template for any syntax or configuration issues.
#   9. Run `packer build`: Builds the AMI using the Packer template. wow

name: Building AMI
on:
  pull_request:
    branches: [main]
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PRODUCT_VERSION: "1.11.2"

jobs:
  build_AMI:
    if: github.event.pull_request.merged == true
    name: Building AMI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Oracle JDK 21.0.1
        uses: oracle-actions/setup-java@v1
        with:
          website: oracle.com
          release: 21
          version: 21.0.1

      - name: Set Application Properties for Building
        run: |
          echo "spring.application.name=${{ secrets.SPRING_APPLICATION_NAME }}" >> $GITHUB_ENV
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" >> $GITHUB_ENV
          echo "spring.datasource.driver-class-name=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" >> $GITHUB_ENV
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> $GITHUB_ENV
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> $GITHUB_ENV
          echo "spring.jpa.hibernate.ddl-auto=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> $GITHUB_ENV
          echo "spring.jpa.show-sql=${{ secrets.SPRING_JPA_SHOW_SQL }}" >> $GITHUB_ENV
          echo "logging.level.com.cloudcomputing.movieRetrievalWebApp.package=${{ secrets.LOGGING_LEVEL_COM_CLOUDCOMPUTING_MOVIERETRIEVALWEBAPP_PACKAGE }}" >> $GITHUB_ENV
          echo "logging.level.org.springframework=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK }}" >> $GITHUB_ENV
          echo "logging.level.org.springframework.boot.devtools=${{ secrets.LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_BOOT_DEVTOOLS }}" >> $GITHUB_ENV
          echo "logging.level.org.hibernate=${{ secrets.LOGGING_LEVEL_ORG_HIBERNATE }}" >> $GITHUB_ENV
          echo "logging.level.com.zaxxer.hikari=${{ secrets.LOGGING_LEVEL_COM_ZAXXER_HIKARI }}" >> $GITHUB_ENV
          echo "logging.level.root=${{ secrets.LOGGING_LEVEL_ROOT }}" >> $GITHUB_ENV

      - name: Building Spring Boot Application run `mvn clean install --file pom.xml`
        run: mvn clean install --file pom.xml

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      # Configure AWS CLI using the IAM service user credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Assume the IAM role using AWS CLI
      - name: Assume IAM Role
        id: assume_role
        run: |
          ROLE_ARN=${{ secrets.AWS_ROLE_ARN }}
          SESSION_NAME="GitHubActionsSession"
          CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name $SESSION_NAME --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" --output text)
          echo $CREDS | awk '{print "AWS_ACCESS_KEY_ID="$1}' >> $GITHUB_ENV
          echo $CREDS | awk '{print "AWS_SECRET_ACCESS_KEY="$2}' >> $GITHUB_ENV
          echo $CREDS | awk '{print "AWS_SESSION_TOKEN="$3}' >> $GITHUB_ENV

      - name: Run `packer init`
        id: init
        run: "packer init cloudNativeAppAMI.pkr.hcl"

      - name: Run `packer fmt`
        id: fmt
        run: "packer fmt cloudNativeAppAMI.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: |
          packer validate -var "subnet_id=${{ secrets.SUBNET_ID }}" cloudNativeAppAMI.pkr.hcl

      - name: Run `packer build`
        id: build
        run: |
          packer build -var "subnet_id=${{ secrets.SUBNET_ID }}" cloudNativeAppAMI.pkr.hcl
